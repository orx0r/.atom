# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on OS X and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * https://atom.io/docs/latest/hacking-atom-debugging#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# pane moving (vim mode)
'atom-text-editor.vim-mode-plus:not(.insert-mode)':
  # go to left tab
  'ctrl-h': 'window:focus-pane-on-left'
  # go to right tab
  'ctrl-l': 'window:focus-pane-on-right'

# rebind termrk
'.platform-linux atom-text-editor':
  'alt-space': 'unset!'
  'shift-space': 'termrk:toggle'

# autocomplete navigation
'atom-text-editor:not(mini).autocomplete-active':
  'ctrl-p': 'core:move-up'
  'ctrl-n': 'core:move-down'

# search
'atom-text-editor.vim-mode:not(.insert-mode)':
  '/': 'find-and-replace:show'

# focus on tree
'.platform-win32, .platform-linux':
  'ctrl-0': 'tree-view:toggle-focus'

# tree view navigation (vim-mode way)
'.tree-view':
  'g g': 'core:move-to-top'
  'shift-g': 'core:move-to-bottom'
